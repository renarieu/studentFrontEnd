{"ast":null,"code":"import { flatMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class StudentService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.baseUrl = \"http://localhost:8080/\";\n  }\n  //redirect to home page\n  returnToHome() {\n    window.location.href = \"http://localhost:4200/students\";\n  }\n  getStudentById(studentId) {\n    return this.httpClient.get(`${this.baseUrl}/findStudent/${studentId}`);\n  }\n  getStudents() {\n    return this.httpClient.get(`${this.baseUrl}/students`);\n  }\n  // q: can you cange the method below to make it redirect the user to the hone page after adding a student ?\n  // a: yes, I can. I will use flatMap to handle the sequential execution of asynchronous operations\n  // save student and redirect to home page\n  saveStudent(student) {\n    // Use flatMap to handle the sequential execution of asynchronous operations\n    return this.httpClient.post(`${this.baseUrl}/addStudent`, student).pipe(flatMap(() => this.getStudents()));\n  }\n  // saveStudent(student: Student): Observable<Object> {\n  //   // Use flatMap to handle the sequential execution of asynchronous operations\n  //   return this.httpClient.post<Student>(`${this.baseUrl}/addStudent`, student)\n  // }\n  deleteStudent(studentId) {\n    const deleteUser = this.httpClient.delete(`${this.baseUrl}delete/${studentId}`);\n    this.returnToHome();\n    return deleteUser;\n  }\n  updateStudent(studentId, student) {\n    return this.httpClient.put(`${this.baseUrl}modify/${studentId}`, student);\n  }\n  static #_ = this.ɵfac = function StudentService_Factory(t) {\n    return new (t || StudentService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: StudentService,\n    factory: StudentService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["flatMap","StudentService","constructor","httpClient","baseUrl","returnToHome","window","location","href","getStudentById","studentId","get","getStudents","saveStudent","student","post","pipe","deleteStudent","deleteUser","delete","updateStudent","put","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/Users/renaudrieux/Github/studentAngularFrontend/src/app/student.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Student } from './Student';\nimport { flatMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StudentService {\n  private baseUrl:string = \"http://localhost:8080/\"\n\n  constructor(private httpClient:HttpClient) {\n  }\n\n  //redirect to home page\n  returnToHome(){\n    window.location.href = \"http://localhost:4200/students\"\n  }\n\n  getStudentById(studentId:number):  Observable<Student>{\n    return this.httpClient.get<Student>(`${this.baseUrl}/findStudent/${studentId}`)\n\n  }\n  \n  getStudents():Observable<Student[]>{\n    return this.httpClient.get<Student[]>(`${this.baseUrl}/students`);\n  }\n\n  // q: can you cange the method below to make it redirect the user to the hone page after adding a student ?\n  // a: yes, I can. I will use flatMap to handle the sequential execution of asynchronous operations\n\n\n  // save student and redirect to home page\n  saveStudent(student: Student): Observable<Object> {\n    // Use flatMap to handle the sequential execution of asynchronous operations\n    return this.httpClient.post<Student>(`${this.baseUrl}/addStudent`, student).pipe(\n      flatMap(() => this.getStudents())\n    );\n  }\n\n\n  // saveStudent(student: Student): Observable<Object> {\n  //   // Use flatMap to handle the sequential execution of asynchronous operations\n  //   return this.httpClient.post<Student>(`${this.baseUrl}/addStudent`, student)\n  // }\n\n  deleteStudent(studentId:number):Observable<Object>{\n    const deleteUser = this.httpClient.delete(`${this.baseUrl}delete/${studentId}`);\n    this.returnToHome();\n    return deleteUser;\n  }\n\n  \n  updateStudent(studentId:number, student:Student):Observable<Object>{\n    return this.httpClient.put(`${this.baseUrl}modify/${studentId}`,student)\n  }\n\n}\n"],"mappings":"AAIA,SAASA,OAAO,QAAQ,gBAAgB;;;AAKxC,OAAM,MAAOC,cAAc;EAGzBC,YAAoBC,UAAqB;IAArB,KAAAA,UAAU,GAAVA,UAAU;IAFtB,KAAAC,OAAO,GAAU,wBAAwB;EAGjD;EAEA;EACAC,YAAYA,CAAA;IACVC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,gCAAgC;EACzD;EAEAC,cAAcA,CAACC,SAAgB;IAC7B,OAAO,IAAI,CAACP,UAAU,CAACQ,GAAG,CAAU,GAAG,IAAI,CAACP,OAAO,gBAAgBM,SAAS,EAAE,CAAC;EAEjF;EAEAE,WAAWA,CAAA;IACT,OAAO,IAAI,CAACT,UAAU,CAACQ,GAAG,CAAY,GAAG,IAAI,CAACP,OAAO,WAAW,CAAC;EACnE;EAEA;EACA;EAGA;EACAS,WAAWA,CAACC,OAAgB;IAC1B;IACA,OAAO,IAAI,CAACX,UAAU,CAACY,IAAI,CAAU,GAAG,IAAI,CAACX,OAAO,aAAa,EAAEU,OAAO,CAAC,CAACE,IAAI,CAC9EhB,OAAO,CAAC,MAAM,IAAI,CAACY,WAAW,EAAE,CAAC,CAClC;EACH;EAGA;EACA;EACA;EACA;EAEAK,aAAaA,CAACP,SAAgB;IAC5B,MAAMQ,UAAU,GAAG,IAAI,CAACf,UAAU,CAACgB,MAAM,CAAC,GAAG,IAAI,CAACf,OAAO,UAAUM,SAAS,EAAE,CAAC;IAC/E,IAAI,CAACL,YAAY,EAAE;IACnB,OAAOa,UAAU;EACnB;EAGAE,aAAaA,CAACV,SAAgB,EAAEI,OAAe;IAC7C,OAAO,IAAI,CAACX,UAAU,CAACkB,GAAG,CAAC,GAAG,IAAI,CAACjB,OAAO,UAAUM,SAAS,EAAE,EAACI,OAAO,CAAC;EAC1E;EAAC,QAAAQ,CAAA,G;qBA/CUrB,cAAc,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAd1B,cAAc;IAAA2B,OAAA,EAAd3B,cAAc,CAAA4B,IAAA;IAAAC,UAAA,EAFb;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}
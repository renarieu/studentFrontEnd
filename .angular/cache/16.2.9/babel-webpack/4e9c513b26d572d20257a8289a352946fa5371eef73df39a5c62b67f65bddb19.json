{"ast":null,"code":"import { switchMap, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class StudentService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.baseUrl = \"http://localhost:8080/\";\n  }\n  //redirect to home page\n  returnToHome() {\n    window.location.href = \"http://localhost:4200/students\";\n  }\n  getStudentById(studentId) {\n    return this.httpClient.get(`${this.baseUrl}/findStudent/${studentId}`);\n  }\n  getStudents() {\n    return this.httpClient.get(`${this.baseUrl}/students`);\n  }\n  saveStudent(student) {\n    return this.httpClient.post(`${this.baseUrl}/addStudent`, student).pipe(tap(() => {\n      window.location.href = '/';\n    }));\n  }\n  deleteStudent(studentId) {\n    const deleteUser = this.httpClient.delete(`${this.baseUrl}delete/${studentId}`);\n    this.returnToHome();\n    return deleteUser;\n  }\n  // updateStudent(studentId: number, student: Student): Observable<Object> {\n  //   this.httpClient.put(`${this.baseUrl}/modify/${studentId}`, student).toPromise()\n  //     .then(function(response) {\n  //       if (response && (response as any).ok) {\n  //         console.log(\"Request was successful: \" + (response as any).status);\n  //       } else {\n  //         console.error(\"Request failed with status: \" + ((response && (response as any).status) ? (response as any).status : 'unknown'));\n  //       }\n  //     })\n  //     .catch(function(error) {\n  //       console.error(\"Request failed: \" + error);\n  //     });\n  //     return this.httpClient.put(`${this.baseUrl}/${studentId}`, student)\n  // }\n  updateStudent(studentId, student) {\n    return this.httpClient.put(`${this.baseUrl}/modify/${studentId}`, student).pipe(tap(response => {\n      if (response && response.ok) {\n        console.log(\"Request was successful: \" + response.status);\n      } else {\n        console.error(\"Request failed with status: \" + (response && response.status ? response.status : 'unknown'));\n      }\n    }), switchMap(() => {\n      this.returnToHome(); // Redirect to home after the request is processed\n      return this.httpClient.put(`${this.baseUrl}/${studentId}`, student);\n    }));\n  }\n  static #_ = this.ɵfac = function StudentService_Factory(t) {\n    return new (t || StudentService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: StudentService,\n    factory: StudentService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["switchMap","tap","StudentService","constructor","httpClient","baseUrl","returnToHome","window","location","href","getStudentById","studentId","get","getStudents","saveStudent","student","post","pipe","deleteStudent","deleteUser","delete","updateStudent","put","response","ok","console","log","status","error","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/Users/renaudrieux/Github/studentAngularFrontend/src/app/student.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { Student } from './Student';\nimport { flatMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StudentService {\n  private baseUrl:string = \"http://localhost:8080/\"\n\n  constructor(private httpClient:HttpClient) {\n  }\n\n  //redirect to home page\n  returnToHome(){\n    window.location.href = \"http://localhost:4200/students\"\n  }\n\n  getStudentById(studentId:number):  Observable<Student>{\n    return this.httpClient.get<Student>(`${this.baseUrl}/findStudent/${studentId}`)\n\n  }\n  \n  getStudents():Observable<Student[]>{\n    return this.httpClient.get<Student[]>(`${this.baseUrl}/students`);\n  }\n\n  saveStudent(student: Student): Observable<Object> {\n    return this.httpClient.post<Student>(`${this.baseUrl}/addStudent`, student).pipe(\n      tap(() => {\n        window.location.href = '/'; \n      })\n    );\n  }\n\n  deleteStudent(studentId:number):Observable<Object>{\n    const deleteUser = this.httpClient.delete(`${this.baseUrl}delete/${studentId}`);\n    this.returnToHome();\n    return deleteUser;\n  }\n\n  // updateStudent(studentId: number, student: Student): Observable<Object> {\n  //   this.httpClient.put(`${this.baseUrl}/modify/${studentId}`, student).toPromise()\n  //     .then(function(response) {\n  //       if (response && (response as any).ok) {\n  //         console.log(\"Request was successful: \" + (response as any).status);\n  //       } else {\n  //         console.error(\"Request failed with status: \" + ((response && (response as any).status) ? (response as any).status : 'unknown'));\n  //       }\n  //     })\n  //     .catch(function(error) {\n  //       console.error(\"Request failed: \" + error);\n  //     });\n  //     return this.httpClient.put(`${this.baseUrl}/${studentId}`, student)\n  // }\n\n  updateStudent(studentId: number, student: Student): Observable<Object> {\n    return this.httpClient.put(`${this.baseUrl}/modify/${studentId}`, student).pipe(\n      tap(response => {\n        if (response && (response as any).ok) {\n          console.log(\"Request was successful: \" + (response as any).status);\n        } else {\n          console.error(\"Request failed with status: \" + ((response && (response as any).status) ? (response as any).status : 'unknown'));\n        }\n      }),\n      switchMap(() => {\n        this.returnToHome(); // Redirect to home after the request is processed\n        return this.httpClient.put(`${this.baseUrl}/${studentId}`, student);\n      })\n    );\n  }\n  \n  // updateStudent(studentId: number, student: Student): Observable<any> {\n  //   return this.httpClient.put(`${this.baseUrl}/modify/${studentId}`, student)\n  //     .pipe(\n  //       map(response => {\n  //         return response;\n  //       })\n  //     );\n  // }\n}\n"],"mappings":"AAGA,SAAcA,SAAS,EAAEC,GAAG,QAAQ,gBAAgB;;;AAOpD,OAAM,MAAOC,cAAc;EAGzBC,YAAoBC,UAAqB;IAArB,KAAAA,UAAU,GAAVA,UAAU;IAFtB,KAAAC,OAAO,GAAU,wBAAwB;EAGjD;EAEA;EACAC,YAAYA,CAAA;IACVC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,gCAAgC;EACzD;EAEAC,cAAcA,CAACC,SAAgB;IAC7B,OAAO,IAAI,CAACP,UAAU,CAACQ,GAAG,CAAU,GAAG,IAAI,CAACP,OAAO,gBAAgBM,SAAS,EAAE,CAAC;EAEjF;EAEAE,WAAWA,CAAA;IACT,OAAO,IAAI,CAACT,UAAU,CAACQ,GAAG,CAAY,GAAG,IAAI,CAACP,OAAO,WAAW,CAAC;EACnE;EAEAS,WAAWA,CAACC,OAAgB;IAC1B,OAAO,IAAI,CAACX,UAAU,CAACY,IAAI,CAAU,GAAG,IAAI,CAACX,OAAO,aAAa,EAAEU,OAAO,CAAC,CAACE,IAAI,CAC9EhB,GAAG,CAAC,MAAK;MACPM,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,GAAG;IAC5B,CAAC,CAAC,CACH;EACH;EAEAS,aAAaA,CAACP,SAAgB;IAC5B,MAAMQ,UAAU,GAAG,IAAI,CAACf,UAAU,CAACgB,MAAM,CAAC,GAAG,IAAI,CAACf,OAAO,UAAUM,SAAS,EAAE,CAAC;IAC/E,IAAI,CAACL,YAAY,EAAE;IACnB,OAAOa,UAAU;EACnB;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEAE,aAAaA,CAACV,SAAiB,EAAEI,OAAgB;IAC/C,OAAO,IAAI,CAACX,UAAU,CAACkB,GAAG,CAAC,GAAG,IAAI,CAACjB,OAAO,WAAWM,SAAS,EAAE,EAAEI,OAAO,CAAC,CAACE,IAAI,CAC7EhB,GAAG,CAACsB,QAAQ,IAAG;MACb,IAAIA,QAAQ,IAAKA,QAAgB,CAACC,EAAE,EAAE;QACpCC,OAAO,CAACC,GAAG,CAAC,0BAA0B,GAAIH,QAAgB,CAACI,MAAM,CAAC;OACnE,MAAM;QACLF,OAAO,CAACG,KAAK,CAAC,8BAA8B,IAAKL,QAAQ,IAAKA,QAAgB,CAACI,MAAM,GAAKJ,QAAgB,CAACI,MAAM,GAAG,SAAS,CAAC,CAAC;;IAEnI,CAAC,CAAC,EACF3B,SAAS,CAAC,MAAK;MACb,IAAI,CAACM,YAAY,EAAE,CAAC,CAAC;MACrB,OAAO,IAAI,CAACF,UAAU,CAACkB,GAAG,CAAC,GAAG,IAAI,CAACjB,OAAO,IAAIM,SAAS,EAAE,EAAEI,OAAO,CAAC;IACrE,CAAC,CAAC,CACH;EACH;EAAC,QAAAc,CAAA,G;qBA/DU3B,cAAc,EAAA4B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAdhC,cAAc;IAAAiC,OAAA,EAAdjC,cAAc,CAAAkC,IAAA;IAAAC,UAAA,EAFb;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}